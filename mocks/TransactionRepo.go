// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eyo-chen/expense-tracker-go/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TransactionRepo is an autogenerated mock type for the TransactionRepo type
type TransactionRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, trans
func (_m *TransactionRepo) Create(ctx context.Context, trans domain.CreateTransactionInput) error {
	ret := _m.Called(ctx, trans)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CreateTransactionInput) error); ok {
		r0 = rf(ctx, trans)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TransactionRepo) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccInfo provides a mock function with given fields: ctx, query, userID
func (_m *TransactionRepo) GetAccInfo(ctx context.Context, query domain.GetAccInfoQuery, userID int64) (domain.AccInfo, error) {
	ret := _m.Called(ctx, query, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccInfo")
	}

	var r0 domain.AccInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetAccInfoQuery, int64) (domain.AccInfo, error)); ok {
		return rf(ctx, query, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetAccInfoQuery, int64) domain.AccInfo); ok {
		r0 = rf(ctx, query, userID)
	} else {
		r0 = ret.Get(0).(domain.AccInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetAccInfoQuery, int64) error); ok {
		r1 = rf(ctx, query, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, query, userID
func (_m *TransactionRepo) GetAll(ctx context.Context, query domain.GetTransOpt, userID int64) ([]domain.Transaction, domain.DecodedNextKeys, error) {
	ret := _m.Called(ctx, query, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Transaction
	var r1 domain.DecodedNextKeys
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetTransOpt, int64) ([]domain.Transaction, domain.DecodedNextKeys, error)); ok {
		return rf(ctx, query, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetTransOpt, int64) []domain.Transaction); ok {
		r0 = rf(ctx, query, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetTransOpt, int64) domain.DecodedNextKeys); ok {
		r1 = rf(ctx, query, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.DecodedNextKeys)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.GetTransOpt, int64) error); ok {
		r2 = rf(ctx, query, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByIDAndUserID provides a mock function with given fields: ctx, id, userID
func (_m *TransactionRepo) GetByIDAndUserID(ctx context.Context, id int64, userID int64) (domain.Transaction, error) {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDAndUserID")
	}

	var r0 domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (domain.Transaction, error)); ok {
		return rf(ctx, id, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) domain.Transaction); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Get(0).(domain.Transaction)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDailyBarChartData provides a mock function with given fields: ctx, dateRange, transactionType, mainCategIDs, userID
func (_m *TransactionRepo) GetDailyBarChartData(ctx context.Context, dateRange domain.ChartDateRange, transactionType domain.TransactionType, mainCategIDs []int64, userID int64) (domain.DateToChartData, error) {
	ret := _m.Called(ctx, dateRange, transactionType, mainCategIDs, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyBarChartData")
	}

	var r0 domain.DateToChartData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, domain.TransactionType, []int64, int64) (domain.DateToChartData, error)); ok {
		return rf(ctx, dateRange, transactionType, mainCategIDs, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, domain.TransactionType, []int64, int64) domain.DateToChartData); ok {
		r0 = rf(ctx, dateRange, transactionType, mainCategIDs, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.DateToChartData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ChartDateRange, domain.TransactionType, []int64, int64) error); ok {
		r1 = rf(ctx, dateRange, transactionType, mainCategIDs, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDailyLineChartData provides a mock function with given fields: ctx, dateRange, userID
func (_m *TransactionRepo) GetDailyLineChartData(ctx context.Context, dateRange domain.ChartDateRange, userID int64) (domain.DateToChartData, error) {
	ret := _m.Called(ctx, dateRange, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDailyLineChartData")
	}

	var r0 domain.DateToChartData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, int64) (domain.DateToChartData, error)); ok {
		return rf(ctx, dateRange, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, int64) domain.DateToChartData); ok {
		r0 = rf(ctx, dateRange, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.DateToChartData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ChartDateRange, int64) error); ok {
		r1 = rf(ctx, dateRange, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonthlyAggregatedData provides a mock function with given fields: ctx, date
func (_m *TransactionRepo) GetMonthlyAggregatedData(ctx context.Context, date time.Time) ([]domain.MonthlyAggregatedData, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetMonthlyAggregatedData")
	}

	var r0 []domain.MonthlyAggregatedData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]domain.MonthlyAggregatedData, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []domain.MonthlyAggregatedData); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.MonthlyAggregatedData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonthlyBarChartData provides a mock function with given fields: ctx, dateRange, transactionType, mainCategIDs, userID
func (_m *TransactionRepo) GetMonthlyBarChartData(ctx context.Context, dateRange domain.ChartDateRange, transactionType domain.TransactionType, mainCategIDs []int64, userID int64) (domain.DateToChartData, error) {
	ret := _m.Called(ctx, dateRange, transactionType, mainCategIDs, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMonthlyBarChartData")
	}

	var r0 domain.DateToChartData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, domain.TransactionType, []int64, int64) (domain.DateToChartData, error)); ok {
		return rf(ctx, dateRange, transactionType, mainCategIDs, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, domain.TransactionType, []int64, int64) domain.DateToChartData); ok {
		r0 = rf(ctx, dateRange, transactionType, mainCategIDs, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.DateToChartData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ChartDateRange, domain.TransactionType, []int64, int64) error); ok {
		r1 = rf(ctx, dateRange, transactionType, mainCategIDs, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonthlyData provides a mock function with given fields: ctx, dateRange, userID
func (_m *TransactionRepo) GetMonthlyData(ctx context.Context, dateRange domain.GetMonthlyDateRange, userID int64) (domain.MonthDayToTransactionType, error) {
	ret := _m.Called(ctx, dateRange, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMonthlyData")
	}

	var r0 domain.MonthDayToTransactionType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetMonthlyDateRange, int64) (domain.MonthDayToTransactionType, error)); ok {
		return rf(ctx, dateRange, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.GetMonthlyDateRange, int64) domain.MonthDayToTransactionType); ok {
		r0 = rf(ctx, dateRange, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.MonthDayToTransactionType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.GetMonthlyDateRange, int64) error); ok {
		r1 = rf(ctx, dateRange, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonthlyLineChartData provides a mock function with given fields: ctx, dateRange, userID
func (_m *TransactionRepo) GetMonthlyLineChartData(ctx context.Context, dateRange domain.ChartDateRange, userID int64) (domain.DateToChartData, error) {
	ret := _m.Called(ctx, dateRange, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMonthlyLineChartData")
	}

	var r0 domain.DateToChartData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, int64) (domain.DateToChartData, error)); ok {
		return rf(ctx, dateRange, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, int64) domain.DateToChartData); ok {
		r0 = rf(ctx, dateRange, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.DateToChartData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ChartDateRange, int64) error); ok {
		r1 = rf(ctx, dateRange, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPieChartData provides a mock function with given fields: ctx, dataRange, transactionType, userID
func (_m *TransactionRepo) GetPieChartData(ctx context.Context, dataRange domain.ChartDateRange, transactionType domain.TransactionType, userID int64) (domain.ChartData, error) {
	ret := _m.Called(ctx, dataRange, transactionType, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPieChartData")
	}

	var r0 domain.ChartData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, domain.TransactionType, int64) (domain.ChartData, error)); ok {
		return rf(ctx, dataRange, transactionType, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ChartDateRange, domain.TransactionType, int64) domain.ChartData); ok {
		r0 = rf(ctx, dataRange, transactionType, userID)
	} else {
		r0 = ret.Get(0).(domain.ChartData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ChartDateRange, domain.TransactionType, int64) error); ok {
		r1 = rf(ctx, dataRange, transactionType, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, trans
func (_m *TransactionRepo) Update(ctx context.Context, trans domain.UpdateTransactionInput) error {
	ret := _m.Called(ctx, trans)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UpdateTransactionInput) error); ok {
		r0 = rf(ctx, trans)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionRepo creates a new instance of TransactionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepo {
	mock := &TransactionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
