// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eyo-chen/expense-tracker-go/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserIconRepo is an autogenerated mock type for the UserIconRepo type
type UserIconRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userIcon
func (_m *UserIconRepo) Create(ctx context.Context, userIcon domain.UserIcon) error {
	ret := _m.Called(ctx, userIcon)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserIcon) error); ok {
		r0 = rf(ctx, userIcon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByObjectKeyAndUserID provides a mock function with given fields: ctx, objectKey, userID
func (_m *UserIconRepo) GetByObjectKeyAndUserID(ctx context.Context, objectKey string, userID int64) (domain.UserIcon, error) {
	ret := _m.Called(ctx, objectKey, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByObjectKeyAndUserID")
	}

	var r0 domain.UserIcon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (domain.UserIcon, error)); ok {
		return rf(ctx, objectKey, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) domain.UserIcon); ok {
		r0 = rf(ctx, objectKey, userID)
	} else {
		r0 = ret.Get(0).(domain.UserIcon)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, objectKey, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *UserIconRepo) GetByUserID(ctx context.Context, userID int64) ([]domain.UserIcon, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserID")
	}

	var r0 []domain.UserIcon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]domain.UserIcon, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.UserIcon); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.UserIcon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserIconRepo creates a new instance of UserIconRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserIconRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserIconRepo {
	mock := &UserIconRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
