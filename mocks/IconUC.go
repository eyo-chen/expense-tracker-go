// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/eyo-chen/expense-tracker-go/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// IconUC is an autogenerated mock type for the IconUC type
type IconUC struct {
	mock.Mock
}

// List provides a mock function with given fields:
func (_m *IconUC) List() ([]domain.DefaultIcon, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.DefaultIcon
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.DefaultIcon, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.DefaultIcon); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DefaultIcon)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByUserID provides a mock function with given fields: ctx, userID
func (_m *IconUC) ListByUserID(ctx context.Context, userID int64) ([]domain.Icon, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserID")
	}

	var r0 []domain.Icon
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]domain.Icon, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Icon); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Icon)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIconUC creates a new instance of IconUC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIconUC(t interface {
	mock.TestingT
	Cleanup(func())
}) *IconUC {
	mock := &IconUC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
