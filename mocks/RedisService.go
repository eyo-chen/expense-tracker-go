// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RedisService is an autogenerated mock type for the RedisService type
type RedisService struct {
	mock.Mock
}

// GetByFunc provides a mock function with given fields: ctx, key, ttl, f
func (_m *RedisService) GetByFunc(ctx context.Context, key string, ttl time.Duration, f func() (string, error)) (string, error) {
	ret := _m.Called(ctx, key, ttl, f)

	if len(ret) == 0 {
		panic("no return value specified for GetByFunc")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func() (string, error)) (string, error)); ok {
		return rf(ctx, key, ttl, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, func() (string, error)) string); ok {
		r0 = rf(ctx, key, ttl, f)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, func() (string, error)) error); ok {
		r1 = rf(ctx, key, ttl, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDel provides a mock function with given fields: ctx, key
func (_m *RedisService) GetDel(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetDel")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, key, value, ttl
func (_m *RedisService) Set(ctx context.Context, key string, value string, ttl time.Duration) error {
	ret := _m.Called(ctx, key, value, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisService creates a new instance of RedisService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisService {
	mock := &RedisService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
